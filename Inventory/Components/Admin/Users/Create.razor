@page "/users/create"

@using Inventory.Components.Account.Shared
@using Inventory.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

@attribute [Authorize]

<PageTitle>Создать</PageTitle>

<h1>Создать</h1>

<h2>Пользователя</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-warning" role="alert">
                @Message
            </div>
        }
        <EditForm method="post" Model="Input" OnValidSubmit="RegisterUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Имя:</label>
                <InputText id="name" @bind-Value="Input.Name" class="form-control" placeholder="Иван Петров" />
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="Input.Email" class="form-control" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="Input.Password">Пароль:</label>
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="Input.ConfirmPassword">Подтверждение пароля:</label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            @foreach (var role in Input.Roles)
            {
                string id = $"role_{role.Key}";

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="Input.Roles[role.Key]" value="@role.Value" id="@id">
                    <label class="form-check-label" for="@id">
                        @role.Key
                    </label>

                   @*  <InputCheckbox id="@id" @bind-Value="Input.Roles[role.Key]" class="form-check-input" />
                    <label for="@id" class="form-label">@role.Key</label> *@

                </div>
            }
            <button type="submit" class="btn btn-primary">Создать</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/locations">Назад к списку</a>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private Dictionary<string, bool> roles = new();

    private IEnumerable<IdentityError>? identityErrors;
    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        var identityRoles = RoleManager.Roles.ToList();
        foreach (var item in identityRoles)
            Input.Roles.Add(item.Name, false);
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser(Input);

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        NavigationManager.NavigateTo("/users");
    }

    private ApplicationUser CreateUser(InputModel input)
    {
        try
        {
            var user = Activator.CreateInstance<ApplicationUser>();

            user.Name = Input.Name;
            user.UserName = Input.Email;
            user.Email = Input.Email;
            user.EmailConfirmed = true;

            return user;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Имя обязательно для заполнения.")]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessage = "Длина Имени должна быть не менее 3 не более 100 букв.")]
        [Display(Name = "Имя")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Email обязательно для заполнения.")]
        [EmailAddress(ErrorMessage = "Email содержит навалидный e-mail адрес.")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Пароль обязательно для заполнения.")]
        [StringLength(100, ErrorMessage = "Длина {0} должна быть не менее {2} и не более {1} символов.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Пароль")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Подтверждение пароля")]
        [Compare("Password", ErrorMessage = "Пароль и Подтверждение пароля не совпадают.")]
        public string ConfirmPassword { get; set; } = "";

        public Dictionary<string, bool> Roles { get; set; } = new();
    }
}
