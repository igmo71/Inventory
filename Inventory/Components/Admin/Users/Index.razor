@page "/users"
@using Inventory.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

@attribute [Authorize]

<PageTitle>Пользователи</PageTitle>

<h1>Пользователи</h1>

<p>   
    <a href="users/create">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-plus" viewBox="0 0 16 16">
            <path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0m4 8c0 1-1 1-1 1H1s-1 0-1-1 1-4 6-4 6 3 6 4m-1-.004c-.001-.246-.154-.986-.832-1.664C9.516 10.68 8.289 10 6 10s-3.516.68-4.168 1.332c-.678.678-.83 1.418-.832 1.664z" />
            <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5" />
        </svg>
        <span> Создать пользователя </span>
    </a>
</p>

<QuickGrid Class="table" ItemsProvider="@itemsProvider">
    @* <PropertyColumn Property="@(userModel => userModel.User != null ? userModel.User.Id : string.Empty)" >
        <HeaderTemplate><th>Id</th></HeaderTemplate>
    </PropertyColumn> *@
    <PropertyColumn Property="@(userModel => userModel.User != null ? userModel.User.Name : string.Empty)" >
        <HeaderTemplate><th>Имя</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(userModel => userModel.User != null ? userModel.User.Email : string.Empty)" >
        <HeaderTemplate><th>Email</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(userModel => userModel.User != null ? userModel.Roles : string.Empty)" >
        <HeaderTemplate><th>Роли</th></HeaderTemplate>
    </PropertyColumn>

    <TemplateColumn Context="userModel">
        @if (userModel.User != null)
        {
            <div>
                <a class="link-primary" href="@($"users/edit?id={userModel.User.Id}")">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                    </svg>
                    <span> Изменить </span>
                </a> |
                <a class="link-danger" href="@($"users/delete?id={userModel.User.Id}")">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                    </svg>
                    <span> Удалить </span>
                </a>
            </div>
        }
    </TemplateColumn>
</QuickGrid>

@code {
    GridItemsProvider<UserModel>? itemsProvider;

    protected override void OnInitialized()
    {
        itemsProvider = async req =>
        {
            var result = await GetUsers();
            return GridItemsProviderResult.From(
                items: result,
                totalItemCount: result.Count);
        };
    }

    private async Task<List<UserModel>> GetUsers()
    {
        var appUsers = UserManager.Users.ToList();

        List<UserModel> userModels = new();

        foreach (var user in appUsers)
        {
            userModels.Add(new UserModel
                {
                    User = user,
                    Roles = await GetRoles(user)
                });
        }
        return userModels;
    }

    private async Task<string> GetRoles(ApplicationUser user)
    {
        var roles = (await UserManager.GetRolesAsync(user)).ToList();
        var result = string.Join(',', roles);
        return result;
    }

    private sealed class UserModel
    {
        public ApplicationUser? User { get; set; }
        public string? Roles { get; set; }
    }
}