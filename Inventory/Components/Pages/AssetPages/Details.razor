@page "/assets/details"
@using Inventory.Application
@using Microsoft.EntityFrameworkCore
@using Inventory.Domain
@inject NavigationManager NavigationManager
@inject IAssetService Service

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Asset</h2>
    <hr />
    @if (asset is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@asset.Name</dd>
            <dt class="col-sm-2">IsFolder</dt>
            <dd class="col-sm-10">@asset.IsFolder</dd>
            <dt class="col-sm-2">IsEquipment</dt>
            <dd class="col-sm-10">@asset.IsEquipment</dd>
            <dt class="col-sm-2">SerialNumber</dt>
            <dt class="col-sm-2">ParentId</dt>
            <dd class="col-sm-10">@asset.ParentId</dd>
        </dl>
        <div>
            <a href="@($"/assets/edit?id={asset.Id}")">Edit</a> |
            <a href="@($"/assets")">Back to List</a>
        </div>
    }
</div>

@code {
    private Asset? asset;

    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
            asset = await Service.Get(Id);

        if (asset is null)
            NavigationManager.NavigateTo("notfound");
    }
}
