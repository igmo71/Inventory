@page "/assets/edit"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IAssetService Service

@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Asset</h2>
<hr />
@if (Asset is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Asset" OnValidSubmit="UpdateAsset" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Asset.Id" value="@Asset.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Asset.Name" class="form-control" />
                    <ValidationMessage For="() => Asset.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isfolder" class="form-label">IsFolder:</label>
                    <InputCheckbox id="isfolder" @bind-Value="Asset.IsFolder" class="form-check-input" />
                    <ValidationMessage For="() => Asset.IsFolder" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isequipment" class="form-label">IsEquipment:</label>
                    <InputCheckbox id="isequipment" @bind-Value="Asset.IsEquipment" class="form-check-input" />
                    <ValidationMessage For="() => Asset.IsEquipment" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="parentid" class="form-label">ParentId:</label>
                    <InputText id="parentid" @bind-Value="Asset.ParentId" class="form-control" />
                    <ValidationMessage For="() => Asset.ParentId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/assets">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    [SupplyParameterFromForm]
    private Asset? Asset { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
            Asset ??= await Service.Get(Id);

        if (Asset is null)
            NavigationManager.NavigateTo("notfound");
    }

    private async Task UpdateAsset()
    {
        await Service.Update(Asset!);

        NavigationManager.NavigateTo("/assets");
    }
}
