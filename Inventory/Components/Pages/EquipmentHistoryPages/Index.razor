@page "/equipmenthistories"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IEquipmentHistoryService Service

@attribute [Authorize]

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="equipmenthistories/create">Create New</a>
</p>

<QuickGrid Class="table" ItemsProvider="itemsProvider">
    <PropertyColumn Property="equipmenthistory => equipmenthistory.AssigneeId" />
    <PropertyColumn Property="equipmenthistory => equipmenthistory.LocationId" />
    <PropertyColumn Property="equipmenthistory => equipmenthistory.EquipmentId" />
    <PropertyColumn Property="equipmenthistory => equipmenthistory.SerialNumberId" />
    <PropertyColumn Property="equipmenthistory => equipmenthistory.DateBegin" />
    <PropertyColumn Property="equipmenthistory => equipmenthistory.DateEnd" />

    <TemplateColumn Context="equipmenthistory">
        <a href="@($"equipmenthistories/edit?id={equipmenthistory.Id}")">Edit</a> |
        <a href="@($"equipmenthistories/details?id={equipmenthistory.Id}")">Details</a> |
        <a href="@($"equipmenthistories/delete?id={equipmenthistory.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    GridItemsProvider<EquipmentHistory>? itemsProvider;

    protected override void OnInitialized()
    {
        itemsProvider = async request =>
        {
            var result = await Service.GetList(request.StartIndex, request.Count);

            if (!result.IsSuccess || result.Value is null)
                return default;

            var response = GridItemsProviderResult.From(
                items: result.Value,
                totalItemCount: result.Total
            );

            return response;
        };
    }
}
