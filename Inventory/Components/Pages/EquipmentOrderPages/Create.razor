@page "/equipmentorders/create"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IEquipmentOrderService Service

@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>EquipmentOrder</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="EquipmentOrder" OnValidSubmit="AddEquipmentOrder" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="equipmentid" class="form-label">EquipmentId:</label> 
                <InputText id="equipmentid" @bind-Value="EquipmentOrder.EquipmentId" class="form-control" /> 
                <ValidationMessage For="() => EquipmentOrder.EquipmentId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="serialnumberid" class="form-label">SerialNumberId:</label> 
                <InputText id="serialnumberid" @bind-Value="EquipmentOrder.SerialNumberId" class="form-control" /> 
                <ValidationMessage For="() => EquipmentOrder.SerialNumberId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datetime" class="form-label">DateTime:</label> 
                <InputDate id="datetime" @bind-Value="EquipmentOrder.DateTime" class="form-control" /> 
                <ValidationMessage For="() => EquipmentOrder.DateTime" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="number" class="form-label">Number:</label> 
                <InputText id="number" @bind-Value="EquipmentOrder.Number" class="form-control" /> 
                <ValidationMessage For="() => EquipmentOrder.Number" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="authorid" class="form-label">AuthorId:</label> 
                <InputText id="authorid" @bind-Value="EquipmentOrder.AuthorId" class="form-control" /> 
                <ValidationMessage For="() => EquipmentOrder.AuthorId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isassigned" class="form-label">IsAssigned:</label> 
                <InputCheckbox id="isassigned" @bind-Value="EquipmentOrder.IsAssigned" class="form-check-input" /> 
                <ValidationMessage For="() => EquipmentOrder.IsAssigned" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="assigneeid" class="form-label">AssigneeId:</label> 
                <InputText id="assigneeid" @bind-Value="EquipmentOrder.AssigneeId" class="form-control" /> 
                <ValidationMessage For="() => EquipmentOrder.AssigneeId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="locationid" class="form-label">LocationId:</label> 
                <InputText id="locationid" @bind-Value="EquipmentOrder.LocationId" class="form-control" /> 
                <ValidationMessage For="() => EquipmentOrder.LocationId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/equipmentorders">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private EquipmentOrder EquipmentOrder { get; set; } = new();

    private async Task AddEquipmentOrder()
    {
        string id = await Service.Create(EquipmentOrder);

        NavigationManager.NavigateTo("/equipmentorders");
    }
}
