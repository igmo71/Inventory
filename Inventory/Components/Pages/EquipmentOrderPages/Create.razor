@page "/equipmentorders/create"
@using Inventory.Application
@using Inventory.Components.Account
@using Inventory.Data
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@inject NavigationManager NavigationManager
@inject IEquipmentOrderService Service
@inject IEquipmentService EquipmentService
@inject ISerialNumberService SerialNumberService
@inject ILocationService LocationService

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<PageTitle>Создать</PageTitle>

<h1>Создать</h1>

<h2>Ордер на Оборудование</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="EquipmentOrder" OnValidSubmit="AddEquipmentOrder" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="authorid" class="form-label">Автор: @applicationUser?.Name</label>
                @* <InputText id="authorid" @bind-Value="EquipmentOrder.AuthorId" class="form-control" /> *@
                <ValidationMessage For="() => EquipmentOrder.AuthorId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="number" class="form-label">Номер:</label>
                <InputText id="number" @bind-Value="EquipmentOrder.Number" class="form-control" />
                <ValidationMessage For="() => EquipmentOrder.Number" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="datetime" class="form-label">Дата:</label>
                <InputDate id="datetime" @bind-Value="EquipmentOrder.DateTime" class="form-control" @bind-Value:format="dd.MM.yyyy hh:mi:ss" disabled />
                <ValidationMessage For="() => EquipmentOrder.DateTime" class="text-danger" />
            </div>            
            <div class="mb-3">
                <label for="equipmentid" class="form-label">Оборудование:</label>
                <InputSelect id="equipmentid" @bind-Value="EquipmentOrder.EquipmentId" @bind-Value:after="GetSerialNumbers" class="form-control">
                    <option value="">- Выберите -</option>
                    @foreach (var equip in equipment)
                    {
                        <option value="@equip.Id">@equip.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => EquipmentOrder.EquipmentId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="serialnumberid" class="form-label">Серийный Номер:</label>
                <InputSelect id="serialnumberid" @bind-Value="EquipmentOrder.SerialNumberId" class="form-control">
                    <option value="">- Выберите -</option>
                    @foreach (var serialNumber in serialNumbers)
                    {
                        <option value="@serialNumber.Id">@serialNumber.Number</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => EquipmentOrder.SerialNumberId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="assigneeid" class="form-label">Ответственный:</label>
                <InputSelect id="assigneeid" @bind-Value="EquipmentOrder.AssigneeId" class="form-control">
                    <option value="">- Выберите -</option>
                    @foreach (var user in applicationUsers)
                    {
                        <option value="@user.Id">@user.Name </option>
                    }
                </InputSelect>
                <ValidationMessage For="() => EquipmentOrder.AssigneeId" class="text-danger" />
            </div>            
            <div class="mb-3">
                <label for="locationid" class="form-label">Локация:</label>
                <InputSelect id="locationid" @bind-Value="EquipmentOrder.LocationId" class="form-control">
                    <option value="">- Выберите -</option>
                    @foreach (var location in locations)
                    {
                        <option value="@location.Id">@location.Name </option>
                    }
                </InputSelect>
                <ValidationMessage For="() => EquipmentOrder.LocationId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="ReceiptDate" class="form-label">Дата получения:</label>
                <InputDate id="ReceiptDate" @bind-Value="EquipmentOrder.ReceiptDate" class="form-control" disabled />
                <ValidationMessage For="() => EquipmentOrder.ReceiptDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="ReturnDate" class="form-label">Дата возврата:</label>
                <InputDate id="ReturnDate" @bind-Value="EquipmentOrder.ReturnDate" class="form-control" disabled />
                <ValidationMessage For="() => EquipmentOrder.ReturnDate" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Создать</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/equipmentorders">Назад к Списку</a>
</div>

@code {
    [SupplyParameterFromForm]
    private EquipmentOrder EquipmentOrder { get; set; } = new();

    private List<Equipment> equipment = new();
    private List<SerialNumber> serialNumbers = new();
    private List<Location> locations = new();
    private List<ApplicationUser> applicationUsers = new();
    private ApplicationUser? applicationUser;

    protected override async Task OnInitializedAsync()
    {
        await GetEquipment();
        await GetLocations();

        await GetApplicationUser();
        EquipmentOrder.AuthorId = applicationUser?.Id;

        EquipmentOrder.DateTime = DateTime.Now;

        GetApplicationUsers();     
    }

    private async Task AddEquipmentOrder()
    {
        string id = await Service.Create(EquipmentOrder);

        await UpdateSerialNumber();

        NavigationManager.NavigateTo("/equipmentorders");
    }

    private async Task UpdateSerialNumber()
    {
        if (EquipmentOrder is not null && EquipmentOrder.SerialNumber != null)
        {
            EquipmentOrder.SerialNumber.IsAssigned = true;

            await SerialNumberService.Update(EquipmentOrder.SerialNumber);
        }
    }

    private async Task GetEquipment()
    {
        equipment = await EquipmentService.GetListWithoutFolders();
    }

    private async Task GetSerialNumbers()
    {
        var equipmentId = EquipmentOrder.EquipmentId;
        var result = await SerialNumberService.GetList(0, null, isIncludeEquipment: true, equipmentId, isNotAssignedOnly: true);
        if (result.IsSuccess)
            serialNumbers = result.Value;
    }

    private async Task GetLocations()
    {
        var locationsResult = await LocationService.GetList(0, null);
        if (locationsResult.IsSuccess)
            locations = locationsResult.Value;
    }

    private async Task GetApplicationUser(){
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        applicationUser = await UserManager.GetUserAsync(authstate.User);
    }

    private void GetApplicationUsers()
    {
        applicationUsers = UserManager.Users.ToList();
    }
}
