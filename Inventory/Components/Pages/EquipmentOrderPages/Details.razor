@page "/equipmentorders/details"
@using Microsoft.EntityFrameworkCore
@using Inventory.Domain
@inject IDbContextFactory<Inventory.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>EquipmentOrder</h2>
    <hr />
    @if (equipmentorder is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">EquipmentId</dt>
            <dd class="col-sm-10">@equipmentorder.EquipmentId</dd>
            <dt class="col-sm-2">SerialNumberId</dt>
            <dd class="col-sm-10">@equipmentorder.SerialNumberId</dd>
            <dt class="col-sm-2">DateTime</dt>
            <dd class="col-sm-10">@equipmentorder.DateTime</dd>
            <dt class="col-sm-2">Number</dt>
            <dd class="col-sm-10">@equipmentorder.Number</dd>
            <dt class="col-sm-2">AuthorId</dt>
            <dd class="col-sm-10">@equipmentorder.AuthorId</dd>
            <dt class="col-sm-2">IsAssigned</dt>
            <dd class="col-sm-10">@equipmentorder.IsAssigned</dd>
            <dt class="col-sm-2">AssigneeId</dt>
            <dd class="col-sm-10">@equipmentorder.AssigneeId</dd>
            <dt class="col-sm-2">LocationId</dt>
            <dd class="col-sm-10">@equipmentorder.LocationId</dd>
        </dl>
        <div>
            <a href="@($"/equipmentorders/edit?id={equipmentorder.Id}")">Edit</a> |
            <a href="@($"/equipmentorders")">Back to List</a>
        </div>
    }
</div>

@code {
    private EquipmentOrder? equipmentorder;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        equipmentorder = await context.EquipmentOrders.FirstOrDefaultAsync(m => m.Id == Id);

        if (equipmentorder is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
