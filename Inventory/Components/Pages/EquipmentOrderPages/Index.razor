@page "/equipmentorders"
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@using Inventory.Application.EquipmentOrderServices
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IEquipmentOrderService Service

@attribute [Authorize]

<PageTitle>Ордера на Оборудование</PageTitle>

<h1>Ордера на Оборудование</h1>

<p>
    <a href="equipmentorders/create">Создать Новый</a>
</p>

<QuickGrid Class="table" ItemsProvider="itemsProvider" Virtualize="true" @ref="grid">
    <PropertyColumn Property="equipmentorder => equipmentorder.Author != null ? equipmentorder.Author.Name : string.Empty" Title="Автор">
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.Number" Title="Номер">
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.DateTime" Format="dd.MM.yyyy" Title="Дата">
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.Equipment != null ? equipmentorder.Equipment.Name : string.Empty" Title="Оборудование">
        <ColumnOptions>
            <div class="search-box">
                <input class="form-control" type="search" autofocus value="@filterParameters.equipmentName" @oninput="OnInputEquipmentFilter" placeholder="Оборудование..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.SerialNumber != null ? equipmentorder.SerialNumber.Number : string.Empty" Title="Серийный номер">
        <ColumnOptions>
            <div class="search-box">
                <input class="form-control" type="search" autofocus value="@filterParameters.serialNumber" @oninput="OnInputSerialNumberFilter" placeholder="Серийный Номер..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.Assignee != null ? equipmentorder.Assignee.Name : string.Empty" Title="Ответственный">
        <ColumnOptions>
            <div class="search-box">
                <input class="form-control" type="search" autofocus value="@filterParameters.assigneeName" @oninput="OnInputAssigneeFilter" placeholder="Ответственный..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.Location != null ? equipmentorder.Location.Name : string.Empty" Title="Локация">
        <ColumnOptions>
            <div class="search-box">
                <input class="form-control" type="search" autofocus value="@filterParameters.locationName" @oninput="OnInputLocationFilter" placeholder="Локация..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.ReceiptDate" Format="dd.MM.yyyy" Title="Дата получения">
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.ReturnDate" Format="dd.MM.yyyy" Title="Дата возврата">
    </PropertyColumn>


    <TemplateColumn Context="equipmentorder">
        <a href="@($"equipmentorders/edit?id={equipmentorder.Id}")">Изменить</a> |
        <a href="@($"equipmentorders/details?id={equipmentorder.Id}")">Детали</a> |
        <a href="@($"equipmentorders/delete?id={equipmentorder.Id}")">Удалить</a>
    </TemplateColumn>
</QuickGrid>

@code {
    [SupplyParameterFromQuery]
    public string? EquipmentId { get; set; }

    [SupplyParameterFromQuery]
    public string? SerialNumberId { get; set; }

    GridItemsProvider<EquipmentOrder>? itemsProvider;

    QuickGrid<EquipmentOrder>? grid;

    int numResults;

    EquipmentOrderFilterParameters filterParameters;

    protected override void OnInitialized()
    {
        if (EquipmentId != null)
            filterParameters.equipmentId = EquipmentId;

        if (SerialNumberId != null)
            filterParameters.serialNumberId = SerialNumberId;

        itemsProvider = async request =>
         {
             var result = await Service.GetList(request,
                 new EquipmentOrderIncludeParameters
                     {
                         isIncludeEquipment = true,
                         isIncludeSerialNumber = true,
                         isIncludeAuthor = true,
                         isIncludeAssignee = true,
                         isIncludeLocation = true
                     },
                 filterParameters);

             if (!result.IsSuccess || result.Value is null)
                 return default;

             if (numResults != result.Total)
             {
                 numResults = result.Total;
                 StateHasChanged();
             }

             var response = GridItemsProviderResult.From(items: result.Value, totalItemCount: result.Total);

             return response;
         };
    }

    void OnInputEquipmentFilter(ChangeEventArgs e)
    {
        filterParameters.equipmentName = e.Value?.ToString() ?? string.Empty;
        grid!.RefreshDataAsync();
    }

    void OnInputSerialNumberFilter(ChangeEventArgs e)
    {
        filterParameters.serialNumber = e.Value?.ToString() ?? string.Empty;
        grid!.RefreshDataAsync();
    }

    void OnInputAssigneeFilter(ChangeEventArgs e)
    {
        filterParameters.assigneeName = e.Value?.ToString() ?? string.Empty;
        grid!.RefreshDataAsync();
    }

    void OnInputLocationFilter(ChangeEventArgs e)
    {
        filterParameters.locationName = e.Value?.ToString() ?? string.Empty;
        grid!.RefreshDataAsync();
    }
}
