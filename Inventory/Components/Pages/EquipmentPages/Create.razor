@page "/equipment/create"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IEquipmentService Service

@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Equipment</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Equipment" OnValidSubmit="AddEquipment" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Equipment.Name" class="form-control" />
                <ValidationMessage For="() => Equipment.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="isfolder" class="form-label">IsFolder:</label>
                <InputCheckbox id="isfolder" @bind-Value="Equipment.IsFolder" class="form-check-input" />
                <ValidationMessage For="() => Equipment.IsFolder" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="parentid" class="form-label">Parent:</label>
                <InputSelect id="parentid" @bind-Value="Equipment.ParentId" class="form-control">
                    <option value="">- Выберите -</option>
                    @foreach (var folder in equipmentFolders){
                        <option value="@folder.Id">@folder.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Equipment.ParentId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/equipment">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Equipment Equipment { get; set; } = new();

    private List<Equipment> equipmentFolders = new();

    protected override async Task OnInitializedAsync()
    {
        equipmentFolders = await Service.GetFolders();
    }

    private async Task AddEquipment()
    {
        string id = await Service.Create(Equipment);

        NavigationManager.NavigateTo("/equipment");
    }
}
