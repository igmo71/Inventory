@page "/equipment/delete"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IEquipmentService Service

@attribute [Authorize]

<PageTitle>Удалить</PageTitle>

<h1>Удалить</h1>

<p>Вы уверены, что хотите удалить?</p>
<div>
    <h2>Оборудование</h2>
    <hr />
    @if (equipment is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Наименование</dt>
            <dd class="col-sm-10">@equipment.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Это Папка</dt>
            <dd class="col-sm-10">@equipment.IsFolder</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">В Папке</dt>
            <dd class="col-sm-10">@equipment.Parent?.Name</dd>
        </dl>
        <EditForm method="post" Model="equipment" OnValidSubmit="DeleteEquipment" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(equipment is null)">Удалить</button> |
            <a href="/equipment">Назад к Списку</a>
        </EditForm>
    }
</div>

@code {
    private Equipment? equipment;

    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
            equipment = await Service.Get(Id, true);

        if (equipment is null)
            NavigationManager.NavigateTo("notfound");
    }

    private async Task DeleteEquipment()
    {
        await Service.Delete(equipment!);

        NavigationManager.NavigateTo("/equipment");
    }
}
