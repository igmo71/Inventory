@page "/equipment/edit"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IEquipmentService Service

@attribute [Authorize]

<PageTitle>Изменить</PageTitle>

<h1>Изменить</h1>

<h2>Оборудование</h2>
<hr />
@if (Equipment is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Equipment" OnValidSubmit="UpdateEquipment" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Equipment.Id" value="@Equipment.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Наименование:</label>
                    <InputText id="name" @bind-Value="Equipment.Name" class="form-control" />
                    <ValidationMessage For="() => Equipment.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isfolder" class="form-label">Это Папка:</label>
                    <InputCheckbox id="isfolder" @bind-Value="Equipment.IsFolder" class="form-check-input" />
                    <ValidationMessage For="() => Equipment.IsFolder" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="parentid" class="form-label">В Папке:</label>
                    <InputSelect id="parentid" @bind-Value="Equipment.ParentId" class="form-control">
                        <option value="">- Выберите -</option>
                        @foreach (var folder in equipmentFolders)
                        {
                            <option value="@folder.Id">@folder.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Equipment.ParentId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/equipment/qg">Назад к Списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    [SupplyParameterFromForm]
    private Equipment? Equipment { get; set; }

    private List<Equipment> equipmentFolders = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
            Equipment ??= await Service.Get(Id);

        if (Equipment is null)
            NavigationManager.NavigateTo("notfound");

        equipmentFolders = await Service.GetFolders();
    }

    private async Task UpdateEquipment()
    {
        await Service.Update(Equipment!);

        NavigationManager.NavigateTo("/equipment/qg");
    }
}
