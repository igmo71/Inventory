@page "/equipment"

@using Inventory.Application
@using Inventory.Components.ComponentModalDialog
@using Inventory.Components.ComponentTreeView
@using Inventory.Components.Icons
@using Inventory.Domain

@inject IEquipmentService Service
@inject ISerialNumberService SerialNumberService

<PageTitle>Оборудование</PageTitle>

<h1>Оборудование</h1>

<p>
    <a href="equipment/create">Создать</a>
</p>

<div class="row">
    <div class="col-8">

        <div class="card shadow-sm  overflow-auto" style="max-height: 800px;">
            <div class="card-body">
                <div class="d-flex flex-row mb-1">
                    <div class="d-inline-flex ms-auto">
                        <a class="btn btn-outline-primary" title="Создать  на верхнем уровне"
                           @onclick="() => OpenCreateDialog()">
                            <PlusLgIcon /><span> Создать </span>
                        </a>
                    </div>
                </div>

                <TreeView TreeItems="treeItems">
                    <TreeItemTemplate Context="treeItem">
                        <div class="d-flex flex-row @(treeItem == selectedTreeItem ? "bg-body-secondary" : string.Empty)">
                            <div class="btn" @onclick="() => ExpandItem(treeItem)">
                                <TreeIcons TreeItem="treeItem" />
                            </div>
                            <div class="btn text-start" @onclick="() => SelectItem(treeItem)">
                                @treeItem.Value
                            </div>
                            <div class="ms-auto">
                                <a class="btn btn-outline-primary @(treeItem.IsFolder ? string.Empty : "invisible")" title="Создать в этой папке"
                                   @onclick="() => OpenCreateDialog(treeItem)">
                                    <PlusLgIcon />
                                </a>
                                <div class="btn-group">
                                    <a href="equipment/edit?id=@treeItem.Id" class="btn btn-outline-success" title="Изменить"><PencilIcon /></a>
                                    <a href="equipment/delete?id=@treeItem.Id" class="btn btn-outline-danger" title="Удалить"><Trash3Icon /></a>
                                </div>
                            </div>
                        </div>
                    </TreeItemTemplate>
                </TreeView>
            </div>
        </div>

    </div>
    <div class="col-4">
        <div><b>Раскрыт:</b> @expandedTreeItem?.Value</div>
        <div><b>Выбран:</b> @selectedTreeItem?.Value</div>
        <div>
            @if (serialNumbers != null)
            {
                <b>Серийные номера</b>
                <table>
                    @foreach (var serialNumber in serialNumbers)
                    {
                        <tr>
                            <td>@serialNumber.Number</td>
                            <td>@serialNumber.IsAssigned</td>
                        </tr>
                    }
                </table>
            }
        </div>
    </div>
</div>

<ModalDialog @ref="@CreateDialog" Title="Создать Оборудование">
    <ModalBody>
        <CreateForm ParentEquipment="parentEquipment" OnValidSubmit="Create" />
    </ModalBody>
</ModalDialog>




@code {
    ModalDialog? CreateDialog { get; set; }
    ModalDialog? DeleteDialog { get; set; }

    private List<TreeItem>? treeItems;
    private List<SerialNumber>? serialNumbers;

    private TreeItem? expandedTreeItem;
    private TreeItem? selectedTreeItem;

    private TreeItem? parentTreeItem;
    private Equipment? parentEquipment;

    protected override async Task OnInitializedAsync()
    {
        await GetItems();
    }

    private async Task GetItems(TreeItem? parentTreeItem = null)
    {
        List<Equipment>? equipment;

        if (parentTreeItem is null)
        {
            equipment = await Service.GetListWithoutParents();

            treeItems = From(equipment);
        }
        else if (parentTreeItem.IsExpanded)
        {
            var listResult = await Service.GetList(parentId: parentTreeItem.Id);

            if (!listResult.IsSuccess)
                return;

            equipment = listResult.Value;

            parentTreeItem.Children = From(equipment);
        }
        else
        {
            parentTreeItem.Children = null;
        }
    }

    private List<TreeItem> From(List<Equipment> equipment)
    {
        return equipment.Select(e => new TreeItem
            {
                Id = e.Id,
                Value = e.Name,
                IsFolder = e.IsFolder
            })
        .ToList();
    }

    private async Task ExpandItem(TreeItem treeItem)
    {
        expandedTreeItem = treeItem;

        expandedTreeItem.IsExpanded = !expandedTreeItem.IsExpanded;

        await GetItems(expandedTreeItem);
    }

    private async Task SelectItem(TreeItem treeItem)
    {
        selectedTreeItem = treeItem;

        var listResult = await SerialNumberService.GetList(equipmentId: treeItem.Id);

        serialNumbers = listResult.Value;
    }

    private void OpenCreateDialog(TreeItem? treeItem = null)
    {
        parentTreeItem = treeItem;

        parentEquipment = treeItem is null
            ? null
            : new Equipment { Id = treeItem.Id, Name = treeItem.Value ?? string.Empty, IsFolder = treeItem.IsFolder };

        CreateDialog?.Open();
    }

    private async Task Create(Equipment equipment)
    {
        var id = await Service.Create(equipment);

        if (parentTreeItem is null)
        {
            await GetItems();

            if (treeItems is not null)
                selectedTreeItem = treeItems.FirstOrDefault(e => e.Id == id);
        }
        else
        {
            parentTreeItem.IsExpanded = true;

            parentTreeItem.Children ??= [];

            await GetItems(parentTreeItem);

            selectedTreeItem = parentTreeItem.Children.FirstOrDefault(e => e.Id == id);
        }

        CreateDialog?.Close();
    }
}
