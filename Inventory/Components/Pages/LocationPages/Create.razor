@page "/locations/create"

@using Inventory.Application.LocationServices
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject ILocationService Service

@attribute [Authorize]

<PageTitle>Создать</PageTitle>

<h1>Создать</h1>

<h2>Локацию</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Location" OnValidSubmit="AddLocation" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Наименование:</label>
                <InputText id="name" @bind-Value="Location.Name" class="form-control" />
                <ValidationMessage For="() => Location.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="isfolder" class="form-label">Это Папка:</label>
                <InputCheckbox id="isfolder" @bind-Value="Location.IsFolder" class="form-check-input" />
                <ValidationMessage For="() => Location.IsFolder" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="parentid" class="form-label">Родительская Локация:</label>
                <InputSelect id="parentid" @bind-Value="Location.ParentId" class="form-control">
                    <option value="">- Выберите -</option>
                    @foreach (var location in locations)
                    {
                        <option value="@location.Id">@location.Name </option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Location.ParentId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Создать</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/locations">Назад к Списку</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Location Location { get; set; } = new() { Id = Guid.CreateVersion7().ToString() };

    private List<Location> locations = new();

    protected override async Task OnInitializedAsync()
    {
        await GetLocations();
    }

    private async Task GetLocations()
    {
        locations = await Service.GetList();
    }

    private async Task AddLocation()
    {
        string id = await Service.Create(Location);

        NavigationManager.NavigateTo("/locations");
    }
}
