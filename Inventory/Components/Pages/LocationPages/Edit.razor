@page "/locations/edit"

@using Inventory.Application.LocationServices
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject ILocationService Service

@attribute [Authorize]

<PageTitle>Изменить</PageTitle>

<h1>Изменить</h1>

<h2>Локацию</h2>
<hr />
@if (Location is null)
{
    <p><em>ЗЩагрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Location" OnValidSubmit="UpdateLocation" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Location.Id" value="@Location.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Наименование:</label>
                    <InputText id="name" @bind-Value="Location.Name" class="form-control" />
                    <ValidationMessage For="() => Location.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isfolder" class="form-label">Это Папка:</label>
                    <InputCheckbox id="isfolder" @bind-Value="Location.IsFolder" class="form-check-input" />
                    <ValidationMessage For="() => Location.IsFolder" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="parentid" class="form-label">Родительская Локация:</label>
                    <InputSelect id="parentid" @bind-Value="Location.ParentId" class="form-control">
                        <option value="">- Выберите -</option>
                        @foreach (var location in locations)
                        {
                            <option value="@location.Id">@location.Name </option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Location.ParentId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href=@(ReturnUrl ?? "/locations")>Назад к Списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private Location? Location { get; set; }

    private List<Location> locations = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
            Location ??= await Service.Get(Id);

        if (Location is null)
            NavigationManager.NavigateTo("notfound");

        await GetLocations();
    }

    private async Task GetLocations()
    {
        locations = await Service.GetList();
    }

    private async Task UpdateLocation()
    {
        if (Location is null)
            return;

        if (string.IsNullOrEmpty(Location.ParentId))
            Location.ParentId = null;

        await Service.Update(Location);

        ReturnUrl ??= "/locations";

        NavigationManager.NavigateTo(ReturnUrl);
    }
}
