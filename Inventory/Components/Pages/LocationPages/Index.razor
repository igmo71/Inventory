@page "/locations"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@inject ILocationService Service

@attribute [Authorize]

<PageTitle>Локации</PageTitle>

<h1>Локации</h1>

<p>
    <a href="locations/create">Создать Новую</a>
</p>

<QuickGrid Class="table" ItemsProvider="itemsProvider">
    @* <PropertyColumn Property="location => location.Id" /> *@
    <PropertyColumn Property="location => location.Name">
        <HeaderTemplate><th>Локация</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="location => location.IsFolder">
        <HeaderTemplate><th>Это Папка</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="location => location.Parent != null ? location.Parent.Name : string.Empty">
        <HeaderTemplate><th>Родительская Локация</th></HeaderTemplate>
    </PropertyColumn>
    @* <TemplateColumn Context="location">
        <span>@location.Parent?.Name</span>
    </TemplateColumn> *@

    <TemplateColumn Context="location">
        <a href="@($"locations/edit?id={location.Id}")">Edit</a> |
        <a href="@($"locations/details?id={location.Id}")">Details</a> |
        <a href="@($"locations/delete?id={location.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    GridItemsProvider<Location>? itemsProvider;

    protected override void OnInitialized()
    {
        itemsProvider = async request =>
        {
            var result = await Service.GetList(request.StartIndex, request.Count, isIncludeParent: true);

            if (!result.IsSuccess || result.Value is null)
                return default;

            var response = GridItemsProviderResult.From(
                items: result.Value,
                totalItemCount: result.Total
            );

            return response;
        };
    }
}
