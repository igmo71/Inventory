@page "/locations/tree"

@using Inventory.Application.LocationServices
@using Inventory.Components.ComponentTreeView
@using Inventory.Components.ComponentTreeViewBase
@using Inventory.Components.Icons
@using Inventory.Domain
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ILocationService Service
@inject ProtectedSessionStorage ProtectedSessionStorage

<h1>Локации</h1>

<p>
    <a href="locations">Таблица</a>
</p>

@if (isConnected)
{
    <div class="row">
        <div class="col">
            <TreeViewBase TreeItems="treeItems" OnSelect="HandleSelect" @ref="treeView">
                <TreeItemTemplate Context="treeItem">
                    <div class="btn-group">
                        <button class="btn btn-outline-success" @onclick="() => OpenEditDialog(treeItem)" title="Изменить"><PencilIcon /></button>
                        <button class="btn btn-outline-danger" @onclick="() => OpenDeleteDialog(treeItem)" title="Удалить"><Trash3Icon /></button>
                    </div>
                </TreeItemTemplate>
            </TreeViewBase>
        </div>
        <div class="col"></div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<Location>? locations;
    private List<TreeItem>? itemsList;
    private List<TreeItem>? treeItems;
    private TreeViewBase? treeView;
    private bool isConnected;

    public string? selectedTreeItemId;
    public List<string>? expandedTreeItems;

    protected override async Task OnInitializedAsync()
    {
        await GetLocations();
        GetItemsList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await LoadTreeStateAsync();

            if (ExpandedTreeItems != null)
            {
                List<TreeItem>? expandedItems = itemsList?
                    .Where(e => ExpandedTreeItems.Contains(e.Id))
                    .ToList();

                if (expandedItems != null)
                    foreach (var item in expandedItems)
                        item.IsExpanded = true;
            }
            if (itemsList != null)
                treeItems = TreeBuilder.Build(itemsList);


            StateHasChanged();
        }
    }

    private async Task LoadTreeStateAsync()
    {
        var expandedTreeItemsResult = await ProtectedSessionStorage.GetAsync<List<string>?>(nameof(ExpandedTreeItems));

        if (expandedTreeItemsResult.Success)
            ExpandedTreeItems = expandedTreeItemsResult.Value;
    }

    private async Task GetLocations()
    {
        locations = await Service.GetList(isIncludeParent: true);
    }

    private void GetItemsList()
    {
        if (locations != null)
            itemsList = From(locations);
    }

    private List<TreeItem> From(List<Location> locations)
    {
        var list = locations.Select(e => new TreeItem
            {
                Id = e.Id,
                Value = e.Name,
                IsFolder = e.IsFolder,
                ParentId = e.ParentId
            }).ToList();

        //var tree = TreeBuilder.Build(list);

        return list;
    }

    private void HandleSelect(TreeItem treeItem)
    {
        //selectedItem = treeItem;
    }

    private async Task OpenEditDialog(TreeItem? treeItem)
    {
        //selectedItem = treeItem;
        //treeView?.SelectTreeItem(selectedItem);
    }

    private async Task OpenDeleteDialog(TreeItem? treeItem)
    {
        //selectedItem = treeItem;
        //treeView?.SelectTreeItem(selectedItem);
    }
}
