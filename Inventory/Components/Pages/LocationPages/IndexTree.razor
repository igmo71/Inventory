@page "/locations/tree"
@using Inventory.Application.LocationServices
@using Inventory.Components.ComponentTreeView
@using Inventory.Components.Icons
@using Inventory.Domain
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ILocationService Service
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager

<h1>Локации</h1>

<p>
    <a href="locations">Таблица</a>
</p>

<p>
    <button class="btn btn-primary" @onclick="RollUpTree">Свернуть все</button>
</p>

<div class="row">
    <div class="col">
        @if (isConnected)
        {
            <TreeView TreeItems="treeItems">
                <TreeItemTemplate Context="treeItem">
                    <div class="d-flex flex-row @(treeItem.Id == selectedTreeItemId ? "bg-body-secondary" : string.Empty)">
                        <div class="btn" @onclick="() => ExpandItem(treeItem)">
                            <TreeIcons TreeItem="treeItem" />
                        </div>
                        <div class="btn text-start" @onclick="() => SelectItem(treeItem)">
                            @treeItem.Value
                        </div>
                        <div class="ms-auto">
                            <a href="locations/create?parentId=@(treeItem.Id)&returnUrl=@(NavigationManager.Uri)"
                            class="btn btn-outline-primary @(treeItem.IsFolder ? string.Empty : "invisible")" title="Создать в этой папке">
                                <PlusLgIcon />
                            </a>
                            <div class="btn-group">
                                <a href="locations/edit?id=@(treeItem.Id)&returnUrl=@(NavigationManager.Uri)" class="btn btn-outline-success" title="Изменить">
                                    <PencilIcon />
                                </a>
                                <a href="locations/delete?id=@(treeItem.Id)&returnUrl=@(NavigationManager.Uri)" class="btn btn-outline-danger" title="Удалить">
                                    <Trash3Icon />
                                </a>
                            </div>
                        </div>
                    </div>
                </TreeItemTemplate>
            </TreeView>
        }
        else
        {
            <p>Загрузка...</p>
        }
    </div>
    <div class="col"></div>
</div>

@code {
    private List<TreeItem>? treeItems;
    private bool isConnected;

    public string? selectedTreeItemId;
    public List<string>? expandedTreeItemsId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetTreeStateAsync();

            await GetTreeItems();

            isConnected = true;

            StateHasChanged();
        }
    }

    private async Task GetTreeStateAsync()
    {
        var expandedTreeItemsResult = await ProtectedSessionStorage.GetAsync<List<string>?>(nameof(expandedTreeItemsId));

        if (expandedTreeItemsResult.Success)
            expandedTreeItemsId = expandedTreeItemsResult.Value;

        var selectedTreeItemIdResult = await ProtectedSessionStorage.GetAsync<string?>(nameof(selectedTreeItemId));

        if (selectedTreeItemIdResult.Success)
            selectedTreeItemId = selectedTreeItemIdResult.Value;
    }

    private async Task GetTreeItems()
    {
        var locations = await Service.GetList(isIncludeParent: true);

        var list = From(locations);

        if (expandedTreeItemsId != null)
        {
            var itemsToExpand = list.Where(e => expandedTreeItemsId.Contains(e.Id));
            foreach (var item in itemsToExpand)
                item.IsExpanded = true;
        }

        treeItems = TreeBuilder.Build(list);
    }

    private List<TreeItem> From(List<Location> locations)
    {
        var list = locations.Select(e => new TreeItem
            {
                Id = e.Id,
                Value = e.Name,
                IsFolder = e.IsFolder,
                ParentId = e.ParentId
            }).ToList();

        return list;
    }

    private async Task ExpandItem(TreeItem treeItem)
    {
        treeItem.IsExpanded = !treeItem.IsExpanded;

        expandedTreeItemsId ??= [];

        if (treeItem.IsExpanded)
            expandedTreeItemsId.Add(treeItem.Id);
        if (!treeItem.IsExpanded)
            expandedTreeItemsId.Remove(treeItem.Id);

        await ProtectedSessionStorage.SetAsync(nameof(expandedTreeItemsId), expandedTreeItemsId);
    }

    private async Task SelectItem(TreeItem treeItem)
    {
        selectedTreeItemId = treeItem.Id;

        await ProtectedSessionStorage.SetAsync(nameof(selectedTreeItemId), selectedTreeItemId);
    }

    private async Task RollUpTree()
    {
        expandedTreeItemsId = null;

        await ProtectedSessionStorage.DeleteAsync(nameof(expandedTreeItemsId));
        await ProtectedSessionStorage.DeleteAsync(nameof(selectedTreeItemId));

        await GetTreeItems();
    }
}
