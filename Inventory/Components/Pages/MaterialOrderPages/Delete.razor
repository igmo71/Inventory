@page "/materialorders/delete"
@using Microsoft.EntityFrameworkCore
@using Inventory.Domain
@inject IDbContextFactory<Inventory.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>MaterialOrder</h2>
    <hr />
    @if (materialorder is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DateTime</dt>
            <dd class="col-sm-10">@materialorder.DateTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Number</dt>
            <dd class="col-sm-10">@materialorder.Number</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AuthorId</dt>
            <dd class="col-sm-10">@materialorder.AuthorId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsAssigned</dt>
            <dd class="col-sm-10">@materialorder.IsAssigned</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AssigneeId</dt>
            <dd class="col-sm-10">@materialorder.AssigneeId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LocationId</dt>
            <dd class="col-sm-10">@materialorder.LocationId</dd>
        </dl>
        <EditForm method="post" Model="materialorder" OnValidSubmit="DeleteMaterialOrder" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(materialorder is null)">Delete</button> |
            <a href="/materialorders">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private MaterialOrder? materialorder;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        materialorder = await context.MaterialOrders.FirstOrDefaultAsync(m => m.Id == Id);

        if (materialorder is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMaterialOrder()
    {
        using var context = DbFactory.CreateDbContext();
        context.MaterialOrders.Remove(materialorder!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/materialorders");
    }
}
