@page "/myequipment"

@using Inventory.Application.EquipmentOrderServices
@using Inventory.Data
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Identity

@inject IEquipmentOrderService Service
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<PageTitle>Мое Оборудование</PageTitle>

<h1>Мое Оборудование</h1>
<h3>@applicationUser?.Name</h3>
<QuickGrid Class="table" ItemsProvider="itemsProvider">

    <PropertyColumn Property="equipmentorder => equipmentorder.Author != null ? equipmentorder.Author.Name : string.Empty">
        <HeaderTemplate><th>Автор</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.Number">
        <HeaderTemplate><th>Номер</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.DateTime" Format="dd.MM.yyyy">
        <HeaderTemplate><th>Дата</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.Equipment != null ? equipmentorder.Equipment.Name : string.Empty">
        <HeaderTemplate><th>Оборудование</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.SerialNumber != null ? equipmentorder.SerialNumber.Number : string.Empty">
        <HeaderTemplate><th>Серийный номер</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.Location != null ? equipmentorder.Location.Name : string.Empty">
        <HeaderTemplate><th>Локация</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.ReceiptDate" Format="dd.MM.yyyy">
        <HeaderTemplate><th> Дата получения</th></HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="equipmentorder => equipmentorder.ReturnDate" Format="dd.MM.yyyy">
        <HeaderTemplate><th> Дата возврата</th></HeaderTemplate>
    </PropertyColumn>

    <TemplateColumn Context="equipmentorder">
        @if (equipmentorder.ReceiptDate == null)
        {
            <a class="link-danger text-nowrap" href="@($"myequipment/sign?id={equipmentorder.Id}")">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-diamond-fill" viewBox="0 0 16 16">
                    <path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L.436 6.95c-.58.58-.58 1.519 0 2.098l6.516 6.516c.58.58 1.519.58 2.098 0l6.516-6.516c.58-.58.58-1.519 0-2.098L9.05.435zM8 4c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995A.905.905 0 0 1 8 4zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                </svg>
                <span> Подписать </span>
            </a>
        }

        @if (equipmentorder.ReceiptDate != null && equipmentorder.ReturnDate == null)
        {
            <a class="text-nowrap" href="@($"myequipment/replace?id={equipmentorder.Id}")">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-reply-fill" viewBox="0 0 16 16">
                    <path d="M5.921 11.9 1.353 8.62a.719.719 0 0 1 0-1.238L5.921 4.1A.716.716 0 0 1 7 4.719V6c1.5 0 6 0 7 8-2.5-4.5-7-4-7-4v1.281c0 .56-.606.898-1.079.62z" />
                </svg>
                <span> Переместить </span>
            </a>
        }
    </TemplateColumn>
</QuickGrid>

@code {
    GridItemsProvider<EquipmentOrder>? itemsProvider;

    private ApplicationUser? applicationUser;

    EquipmentOrderFilterParameters filterParameters;

    protected override async Task OnInitializedAsync()
    {
        await GetApplicationUser();

        itemsProvider = async request =>
         {
             var result = await Service.GetList(request,
                 new EquipmentOrderIncludeParameters
                     {
                         isIncludeEquipment = true,
                         isIncludeSerialNumber = true,
                         isIncludeAuthor = true,
                         isIncludeAssignee = true,
                         isIncludeLocation = true
                     },
                 filterParameters);

             if (!result.IsSuccess || result.Value is null)
                 return default;

             var response = GridItemsProviderResult.From(
                 items: result.Value,
                 totalItemCount: result.Total
             );

             return response;
         };
    }

    private async Task GetApplicationUser()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        applicationUser = await UserManager.GetUserAsync(authstate.User);
        filterParameters.assigneeId = applicationUser?.Id;
    }
}
