@page "/orderitems/create"
@using Microsoft.EntityFrameworkCore
@using Inventory.Domain
@inject IDbContextFactory<Inventory.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>OrderItem</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="OrderItem" OnValidSubmit="AddOrderItem" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="orderid" class="form-label">OrderId:</label> 
                <InputText id="orderid" @bind-Value="OrderItem.OrderId" class="form-control" /> 
                <ValidationMessage For="() => OrderItem.OrderId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="assetid" class="form-label">AssetId:</label> 
                <InputText id="assetid" @bind-Value="OrderItem.AssetId" class="form-control" /> 
                <ValidationMessage For="() => OrderItem.AssetId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="amount" class="form-label">Amount:</label> 
                <InputNumber id="amount" @bind-Value="OrderItem.Amount" class="form-control" /> 
                <ValidationMessage For="() => OrderItem.Amount" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/orderitems">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private OrderItem OrderItem { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddOrderItem()
    {
        using var context = DbFactory.CreateDbContext();
        OrderItem.Id = Guid.CreateVersion7().ToString();
        context.OrderItems.Add(OrderItem);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/orderitems");
    }
}
