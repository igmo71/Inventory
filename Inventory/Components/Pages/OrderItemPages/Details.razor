@page "/orderitems/details"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IOrderItemService Service

@attribute [Authorize]
<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>OrderItem</h2>
    <hr />
    @if (orderitem is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">OrderId</dt>
            <dd class="col-sm-10">@orderitem.OrderId</dd>
            <dt class="col-sm-2">AssetId</dt>
            <dd class="col-sm-10">@orderitem.AssetId</dd>
            <dt class="col-sm-2">SerialNumberId</dt>
            <dd class="col-sm-10">@orderitem.SerialNumberId</dd>
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@orderitem.Amount</dd>
        </dl>
        <div>
            <a href="@($"/orderitems/edit?id={orderitem.Id}")">Edit</a> |
            <a href="@($"/orderitems")">Back to List</a>
        </div>
    }
</div>

@code {
    private OrderItem? orderitem;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
            orderitem = await Service.Get(Id);

        if (orderitem is null)
            NavigationManager.NavigateTo("notfound");
    }
}
