@page "/orderitems/edit"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IOrderItemService Service

@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>OrderItem</h2>
<hr />
@if (OrderItem is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="OrderItem" OnValidSubmit="UpdateOrderItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="OrderItem.Id" value="@OrderItem.Id" />
                <div class="mb-3">
                    <label for="orderid" class="form-label">OrderId:</label>
                    <InputText id="orderid" @bind-Value="OrderItem.OrderId" class="form-control" />
                    <ValidationMessage For="() => OrderItem.OrderId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="assetid" class="form-label">AssetId:</label>
                    <InputText id="assetid" @bind-Value="OrderItem.AssetId" class="form-control" />
                    <ValidationMessage For="() => OrderItem.AssetId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="serialnumberid" class="form-label">SerialNumberId:</label>
                    <InputText id="serialnumberid" @bind-Value="OrderItem.SerialNumberId" class="form-control" />
                    <ValidationMessage For="() => OrderItem.SerialNumberId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="amount" class="form-label">Amount:</label>
                    <InputNumber id="amount" @bind-Value="OrderItem.Amount" class="form-control" />
                    <ValidationMessage For="() => OrderItem.Amount" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/orderitems">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    [SupplyParameterFromForm]
    private OrderItem? OrderItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
            OrderItem ??= await Service.Get(Id);

        if (OrderItem is null)
            NavigationManager.NavigateTo("notfound");
    }

    private async Task UpdateOrderItem()
    {
        await Service.Update(OrderItem!);

        NavigationManager.NavigateTo("/orderitems");
    }
}
