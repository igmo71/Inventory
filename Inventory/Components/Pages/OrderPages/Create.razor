@page "/orders/create"
@using Microsoft.EntityFrameworkCore
@using Inventory.Domain
@inject IDbContextFactory<Inventory.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Order</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Order" OnValidSubmit="AddOrder" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="datetime" class="form-label">DateTime:</label> 
                <InputDate id="datetime" @bind-Value="Order.DateTime" class="form-control" /> 
                <ValidationMessage For="() => Order.DateTime" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="number" class="form-label">Number:</label> 
                <InputText id="number" @bind-Value="Order.Number" class="form-control" /> 
                <ValidationMessage For="() => Order.Number" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="authorid" class="form-label">AuthorId:</label> 
                <InputText id="authorid" @bind-Value="Order.AuthorId" class="form-control" /> 
                <ValidationMessage For="() => Order.AuthorId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isassigned" class="form-label">IsAssigned:</label> 
                <InputCheckbox id="isassigned" @bind-Value="Order.IsAssigned" class="form-check-input" /> 
                <ValidationMessage For="() => Order.IsAssigned" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="assigneefromid" class="form-label">AssigneeFromId:</label> 
                <InputText id="assigneefromid" @bind-Value="Order.AssigneeFromId" class="form-control" /> 
                <ValidationMessage For="() => Order.AssigneeFromId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="assigneetoid" class="form-label">AssigneeToId:</label> 
                <InputText id="assigneetoid" @bind-Value="Order.AssigneeToId" class="form-control" /> 
                <ValidationMessage For="() => Order.AssigneeToId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="locationfromid" class="form-label">LocationFromId:</label> 
                <InputText id="locationfromid" @bind-Value="Order.LocationFromId" class="form-control" /> 
                <ValidationMessage For="() => Order.LocationFromId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="locationtoid" class="form-label">LocationToId:</label> 
                <InputText id="locationtoid" @bind-Value="Order.LocationToId" class="form-control" /> 
                <ValidationMessage For="() => Order.LocationToId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/orders">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Order Order { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddOrder()
    {
        using var context = DbFactory.CreateDbContext();
        Order.Id = Guid.CreateVersion7().ToString();
        context.Orders.Add(Order);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders");
    }
}
