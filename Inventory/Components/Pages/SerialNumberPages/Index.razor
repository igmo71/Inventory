@page "/serialnumbers"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@inject ISerialNumberService Service

@attribute [Authorize]

<PageTitle>Серийные Номера</PageTitle>

<h1>Серийные Номера</h1>

<p>

    <a href="serialnumbers/create">Создать Новый</a>
</p>

<QuickGrid Class="table" ItemsProvider="itemsProvider">
    <PropertyColumn Property="serialnumber => serialnumber.Equipment != null ? serialnumber.Equipment.Name : string.Empty" Title="Оборудование" />
    <PropertyColumn Property="serialnumber => serialnumber.Number" Title="Серийный Номер" />
    <PropertyColumn Property="serialnumber => serialnumber.IsAssigned" Title="Выдан" />

    <TemplateColumn Context="serialnumber">
        <a href="@($"serialnumbers/edit?id={serialnumber.Id}")">Изменить</a> |
        <a href="@($"serialnumbers/details?id={serialnumber.Id}")">Детали</a> |
        <a href="@($"serialnumbers/delete?id={serialnumber.Id}")">Удалить</a>
    </TemplateColumn>
</QuickGrid>

@code {
    GridItemsProvider<SerialNumber>? itemsProvider;

    protected override void OnInitialized()
    {
        itemsProvider = async request =>
        {
            var result = await Service.GetList(request.StartIndex, request.Count, isIncludeEquipment: true);

            if (!result.IsSuccess || result.Value is null)
                return default;

            var response = GridItemsProviderResult.From(
                items: result.Value,
                totalItemCount: result.Total
            );

            return response;
        };
    }
}
