@page "/stockbalances/delete"
@using Inventory.Application
@using Inventory.Domain
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IStockBalanceService Service

@attribute [Authorize]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>StockBalance</h2>
    <hr />
    @if (stockbalance is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">AssetId</dt>
            <dd class="col-sm-10">@stockbalance.AssetId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SerialNumberId</dt>
            <dd class="col-sm-10">@stockbalance.SerialNumberId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LocationId</dt>
            <dd class="col-sm-10">@stockbalance.LocationId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AssigneeId</dt>
            <dd class="col-sm-10">@stockbalance.AssigneeId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Balance</dt>
            <dd class="col-sm-10">@stockbalance.Balance</dd>
        </dl>
        <EditForm method="post" Model="stockbalance" OnValidSubmit="DeleteStockBalance" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(stockbalance is null)">Delete</button> |
            <a href="/stockbalances">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private StockBalance? stockbalance;

    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
            stockbalance = await Service.Get(Id);

        if (stockbalance is null)
            NavigationManager.NavigateTo("notfound");
    }

    private async Task DeleteStockBalance()
    {
        await Service.Delete(stockbalance!);

        NavigationManager.NavigateTo("/stockbalances");
    }
}
